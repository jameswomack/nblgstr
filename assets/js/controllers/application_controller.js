// Generated by CoffeeScript 1.6.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BB.Controller = (function(_super) {
  var formSetup;

  __extends(Controller, _super);

  Controller.accessor('routingKey', function() {
    return Batman.functionName(this.constructor).replace(/Controller$/, '');
  });

  Controller.accessor("list", {
    get: function() {
      if (this.get('searching')) {
        return this.get('searchResults');
      } else {
        return this.get(this.get('defaultModelNamePlural'));
      }
    }
  });

  jQuery.expr[":"].contains = function(a, i, m) {
    return jQuery(a).text().toUpperCase().indexOf(m[3].toUpperCase()) >= 0;
  };

  Controller.prototype.adjustListForSearchNode = function(node) {
    var cb,
      _this = this;
    cb = function(e, env) {
      var h, r, s, _i, _len, _ref;
      s = [];
      if (env.rows) {
        _ref = env.rows;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          env.subject = BB[Batman.helpers.classify(r.doc.t)];
          h = BB.CouchStorage.prototype.getRecordFromData(r.doc, env.subject);
          h.set('_key', r.key);
          s.push(h);
        }
      }
      if (s.length) {
        _this.set('searching', true);
        return _this.set("searchResults", s.sort(function(a, b) {
          if (a.get("name") >= b.get("name")) {
            return 1;
          } else {
            if (s) {
              return -1;
            }
          }
        }));
      } else {
        return _this.resetSearch(node, true);
      }
    };
    return BB.CouchStorage.couchView("" + (this.get('defaultModelNameSingular')) + "_search", {
      startkey: '"' + $(node).val() + '"',
      endkey: '"' + $(node).val() + 'zzzzz"'
    }, cb);
  };

  Controller.prototype.resetSearch = function(node, keepText) {
    return this.set('searching', false);
  };

  Controller.prototype.filter = function(node) {
    if ($(node).val().length === 0) {
      return this.resetSearch(node);
    } else {
      return this.adjustListForSearchNode(node);
    }
  };

  function Controller() {
    var k;
    k = Batman.helpers.singularize(this.constructor.toString().split('function ')[1].split('() {')[0].split('Controller')[0]);
    this.DefaultModel = BB[k];
    this.set('defaultModelName', k);
    this.set('defaultModelNameSingular', k.toLowerCase());
    this.set('defaultModelNamePlural', Batman.helpers.pluralize(k).toLowerCase());
    this.set('BB', BB);
    Controller.__super__.constructor.apply(this, arguments);
  }

  Controller.prototype.goToNew = function() {
    return this.redirect("/" + (this.get('defaultModelNamePlural')) + "/new");
  };

  Controller.prototype["new"] = function() {
    var options;
    this.set(this.get('defaultModelNameSingular'), new this.DefaultModel);
    options = {};
    options["" + (this.get('defaultModelNameSingular'))] = this.get(this.get('defaultModelNameSingular'));
    return this.set('cameraView', new BB.CameraView(options));
  };

  Controller.prototype.index = function() {
    var _this = this;
    this.set(this.get('defaultModelNamePlural'), new Batman.Set);
    return this.DefaultModel.load(function(e, list) {
      if (e != null) {
        throw e;
      }
      if (list != null) {
        return _this.set(_this.get('defaultModelNamePlural'), (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(Batman.Set, list, function(){}));
      }
    });
  };

  formSetup = function(context) {
    var defaultModelNameSingular, form, formForAttrPrefix;
    form = $('form#batmanModel');
    formForAttrPrefix = 'data-formfor-';
    form.removeAttr("" + formForAttrPrefix + "instance");
    console.log(context);
    defaultModelNameSingular = context.get('defaultModelNameSingular');
    console.log(defaultModelNameSingular, context);
    return form.attr("" + formForAttrPrefix + defaultModelNameSingular, defaultModelNameSingular);
  };

  Controller.prototype.edit = function(params) {
    var _this = this;
    this.set(this.get('defaultModelNameSingular'), new this.DefaultModel);
    this.DefaultModel.find(params.id, function(e, instance) {
      var options;
      if (e) {
        console.error(e);
      }
      if (instance) {
        _this.set(_this.get('defaultModelNameSingular'), instance);
      }
      options = {};
      options["" + (_this.get('defaultModelNameSingular'))] = _this.get(_this.get('defaultModelNameSingular'));
      return _this.set('cameraView', new BB.CameraView(options));
    });
    return BB.on('ready', function() {
      return formSetup(_this);
    });
  };

  Controller.prototype.editCurrentModel = function() {
    var defaultModelNamePlural, defaultModelNameSingular, model, modelID, viewSingleModelPath;
    console.log("foo");
    defaultModelNameSingular = this.get('defaultModelNameSingular');
    defaultModelNamePlural = this.get('defaultModelNamePlural');
    model = this.get(defaultModelNameSingular);
    if (model == null) {
      throw new Error("Model invalid");
    }
    modelID = model.get('id');
    if (modelID == null) {
      throw new Error("Model missing ID");
    }
    viewSingleModelPath = "/" + defaultModelNamePlural + "/" + modelID + "/edit";
    return this.redirect(viewSingleModelPath);
  };

  Controller.prototype.createOrUpdate = function() {
    var defaultModelNameSingular, model,
      _this = this;
    defaultModelNameSingular = this.get('defaultModelNameSingular');
    model = this.get(defaultModelNameSingular);
    if (model == null) {
      throw new Error("Model invalid");
    }
    return model.save(function(err) {
      var defaultModelNamePlural, modelID, viewSingleModelPath;
      if (err) {
        return console.error(err);
      } else {
        defaultModelNamePlural = _this.get('defaultModelNamePlural');
        modelID = model.get('id');
        if (modelID == null) {
          throw new Error("Model missing ID");
        }
        viewSingleModelPath = "/" + defaultModelNamePlural + "/" + modelID;
        return _this.redirect(viewSingleModelPath);
      }
    });
  };

  Controller.prototype.update = function() {
    return this.createOrUpdate.apply(this, arguments);
  };

  Controller.prototype.create = function() {
    return this.createOrUpdate.apply(this, arguments);
  };

  Controller.prototype.show = function(params) {
    var _this = this;
    this.set(this.get('defaultModelNameSingular'), new Batman.Object);
    return this.DefaultModel.find(params.id, function(e, modelInstance) {
      if (e) {
        console.error(e);
      }
      if (modelInstance) {
        return _this.set(_this.get('defaultModelNameSingular'), modelInstance);
      }
    });
  };

  return Controller;

})(Batman.Controller);
